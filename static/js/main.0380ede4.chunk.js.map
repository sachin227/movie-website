{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","apidata","setapidata","cardindex","setcardindex","searchval","setsearchval","updatemovie","setupdatemovie","useEffect","axios","then","res","Search","data","console","log","className","type","placeholder","onChange","e","lowerCased","target","value","toLowerCase","updatedList","filter","Title","includes","length","map","index","imdbID","Year","Poster","onClick","src","alt","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oOAqGeA,MA/Ff,WAEE,MAA8BC,mBAAS,IAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAkCF,mBAAS,MAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KACA,EAAkCJ,mBAAS,IAA3C,mBAAOK,EAAP,KAAkBC,EAAlB,KACD,EAAsCN,mBAAS,IAA/C,mBAAOO,EAAP,KAAoBC,EAApB,KAmDC,OAlDDC,qBAAU,WACTC,IAAM,kDAAkDC,MAAK,SAACC,GAG5D,IAAOC,EAAQD,EAAIE,KAAZD,OACPX,EAAWW,QASX,IAiCJE,QAAQC,IAAIT,GAGF,sBAAKU,UAAU,MAAf,UAEP,sBAAKA,UAAU,YAAf,cAA4B,uBAAOC,KAAK,OAAOC,YAAY,kBAAkBC,SApChE,SAACC,GAEf,IAAMC,EAAaD,EAAEE,OAAOC,MAAMC,cAC5BC,EAAczB,EAAQ0B,QAAO,qBAAGC,MAC7BH,cAAcI,SAASP,MAIhChB,EAAagB,GAEXd,EAAekB,GACfX,QAAQC,IAAIX,EAAUyB,QACtBf,QAAQC,IAAIT,IAwBoFU,UAAU,mBAC1G,qBAAKA,UAAU,eAAf,SAGCV,EAAYuB,QAAWzB,EAAUyB,OAAO,EAAIvB,EAAYwB,KAAI,WAA4BC,GAA5B,IAAEJ,EAAF,EAAEA,MAAWK,GAAb,EAAQC,KAAR,EAAaD,QAAOE,EAApB,EAAoBA,OAApB,OAE5D,sBAAMlB,UAAWd,IAAY6B,EAAM,wBAAwB,aAA2BI,QAAS,WAC9FhC,EAAa4B,GAEbjB,QAAQC,IAAI,UAAW,CAACb,eAHzB,UAMA,qBAAKkC,IAAKF,EAAQG,IAAKV,IACvB,qBAAKX,UAAU,OAAf,SACA,6BAAKW,QARyEK,MAYzEhC,EAAQ8B,KAAI,WAA4BC,GAA5B,IAAEJ,EAAF,EAAEA,MAAWK,GAAb,EAAQC,KAAR,EAAaD,QAAOE,EAApB,EAAoBA,OAApB,OAClB,sBAAMlB,UAAWd,IAAY6B,EAAM,wBAAwB,aAA2BI,QAAS,WAC7FhC,EAAa4B,GAEbjB,QAAQC,IAAI,UAAW,CAACb,eAH1B,UAMA,qBAAKkC,IAAKF,EAAQG,IAAKV,IACvB,qBAAKX,UAAU,OAAf,SACC,6BAAKW,QARwEK,YCvEnEM,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB9B,MAAK,YAAkD,IAA/C+B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.0380ede4.chunk.js","sourcesContent":["import {useState,useEffect} from 'react'\nimport './App.css';\n\nimport axios from 'axios'\n\n\nfunction App() {\n  \n  const [apidata, setapidata] = useState([])\n  const [cardindex, setcardindex] = useState(null)\n  const [searchval, setsearchval] = useState(\"\")\n const [updatemovie, setupdatemovie] = useState([])\n useEffect(() => {\n  axios('https://www.omdbapi.com/?apikey=45f0782a&s=war').then((res)=>{\n   \n\n    const {Search}=res.data\n    setapidata(Search)\n   \n   \n    \n   // console.log(\"search is\",Search)\n   }\n \n  )\n  \n }, [])\n  \n const inputval=(e)=>{\n   debugger\n  const lowerCased = e.target.value.toLowerCase()\n  const updatedList = apidata.filter(({ Title }) =>(\n     Title.toLowerCase().includes(lowerCased)\n  )\n  )\n  \n  setsearchval(lowerCased)\n \n    setupdatemovie(updatedList)\n    console.log(searchval.length)\n    console.log(updatemovie)\n \n  \n \n    \n  //setsearchval(e.target.value)\n  \n // const update= apidata.filter((item)=>{\n  //  const str=item.Title\n   // const lowerstr= str.toLowerCase()\n   // console.log(lowerstr)\n    \n    \n  //  return lowerstr.includes(searchval)\n    \n   // })\n  \n   // setapidata(update)\n  }\nconsole.log(updatemovie)\n  \n\n  return (<div className=\"App\">\n   \n   <div className=\"inputcont\"> <input type=\"text\" placeholder=\"Enter Any Movie\" onChange={inputval} className=\"inputdesign\"/></div>\n    <div className=\"Appcontainer\">\n      \n      \n    {updatemovie.length  && searchval.length>0 ? updatemovie.map(({Title,Year,imdbID,Poster},index)=>(\n    \n     <div  className={cardindex===index?'heighlight moviecards':'moviecards'} key={imdbID} onClick={()=>{ \n      setcardindex(index)\n    \n      console.log(\"clicked\", {cardindex})\n     }}>\n    \n     <img src={Poster} alt={Title}/>\n     <div className=\"desc\">\n     <h5>{Title}</h5>\n     </div>\n     </div>\n\n    ))  : apidata.map(({Title,Year,imdbID,Poster},index)=>\n    <div  className={cardindex===index?'heighlight moviecards':'moviecards'} key={imdbID} onClick={()=>{ \n      setcardindex(index)\n    \n      console.log(\"clicked\", {cardindex})\n    }}>\n    \n    <img src={Poster} alt={Title}/>\n    <div className=\"desc\">\n     <h5>{Title}</h5>\n    </div>\n    </div>\n    \n    )}\n    </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}